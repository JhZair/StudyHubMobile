[
    {
      "id": 1,
      "enunciado": "¿Qué imprime el siguiente código C++? \n```cpp\n#include <iostream>\nint main() {\n    int x = 5;\n    int* p = &x;\n    *p = 10;\n    std::cout << x;\n    return 0;\n}\n```",
      "opciones": ["5", "10", "0", "Dirección de memoria"],
      "respuestaCorrecta": "10"
    },
    {
      "id": 2,
      "enunciado": "En C++, ¿cuál es el resultado de intentar acceder a un elemento fuera de los límites de un vector usando el método `at()`?",
      "opciones": ["Valor indefinido", "Excepción std::out_of_range", "Valor 0", "Programa termina sin error"],
      "respuestaCorrecta": "Excepción std::out_of_range"
    },
    {
      "id": 3,
      "enunciado": "¿Qué palabra clave se usa en C++ para indicar que una función miembro de una clase no modificará los datos de la clase?",
      "opciones": ["static", "const", "virtual", "inline"],
      "respuestaCorrecta": "const"
    },
    {
      "id": 4,
      "enunciado": "Dado el siguiente código, ¿cuál es el valor de `y` después de ejecutarlo? \n```cpp\nint x = 10;\nauto y = x++;\n```",
      "opciones": ["10", "11", "9", "Indefinido"],
      "respuestaCorrecta": "10"
    },
    {
      "id": 5,
      "enunciado": "¿Qué tipo de herencia permite que una clase derivada herede de múltiples clases base en C++?",
      "opciones": ["Simple", "Múltiple", "Jerárquica", "Híbrida"],
      "respuestaCorrecta": "Múltiple"
    },
    {
      "id": 6,
      "enunciado": "En C++, ¿cuál es el propósito de la palabra clave `virtual` en una función miembro de una clase base?",
      "opciones": ["Evitar la sobrecarga", "Permitir el polimorfismo dinámico", "Hacer la función estática", "Restringir el acceso"],
      "respuestaCorrecta": "Permitir el polimorfismo dinámico"
    },
    {
      "id": 7,
      "enunciado": "¿Qué excepción se lanza si se intenta dividir un entero por cero en C++?",
      "opciones": ["std::logic_error", "std::runtime_error", "No se lanza excepción", "std::overflow_error"],
      "respuestaCorrecta": "No se lanza excepción"
    },
    {
      "id": 8,
      "enunciado": "En el siguiente código, ¿cuántas veces se llama al constructor de la clase `A`? \n```cpp\nclass A {\npublic:\n    A() {}\n};\nint main() {\n    A arr[3];\n    return 0;\n}\n```",
      "opciones": ["0", "1", "3", "Indefinido"],
      "respuestaCorrecta": "3"
    },
    {
      "id": 9,
      "enunciado": "¿Cuál es el propósito de la clase `std::unique_ptr` en C++?",
      "opciones": ["Gestión automática de memoria con propiedad única", "Almacenar múltiples punteros", "Permitir copias profundas", "Gestionar memoria estática"],
      "respuestaCorrecta": "Gestión automática de memoria con propiedad única"
    },
    {
      "id": 10,
      "enunciado": "Dado el siguiente código, ¿qué imprime? \n```cpp\n#include <iostream>\nclass Base {\npublic:\n    virtual void print() { std::cout << \"Base\"; }\n};\nclass Derived : public Base {\npublic:\n    void print() override { std::cout << \"Derived\"; }\n};\nint main() {\n    Base* b = new Derived();\n    b->print();\n    delete b;\n    return 0;\n}\n```",
      "opciones": ["Base", "Derived", "Nada", "Error de compilación"],
      "respuestaCorrecta": "Derived"
    }
  ]